import streamlit as st
import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score

# Configuration de la page
st.set_page_config(
    page_title="Pr√©diction des performances des √©tudiants",
    page_icon="üìö",
    layout="centered",
    initial_sidebar_state="expanded",
)

# Titre de l'application
st.title("üìä Pr√©diction des Performances des √âtudiants")
st.markdown(
    """
    Cette application utilise un mod√®le de r√©gression lin√©aire pour pr√©dire les performances des √©tudiants en fonction de diff√©rents param√®tres. 
    Veuillez remplir le formulaire ci-dessous pour tester le mod√®le.
    """
)

# Charger les donn√©es
data = pd.read_csv("Student_Performance (1).csv")

# Renommer les colonnes
data = data.rename(
    columns={
        "Hours Studied": "HS",
        "Previous Scores": "Scores",
        "Extracurricular Activities": "Activities",
        "Sleep Hours": "sommeil",
        "Sample Question Papers Practiced": "pratique",
        "Performance Index": "Performance",
    }
)

# Convertir les activit√©s en valeurs num√©riques
data["Activities"] = data["Activities"].map({"Yes": 1, "No": 0})

# S√©parer les donn√©es
X = data.drop("Performance", axis=1)
y = data["Performance"]

# Diviser les donn√©es en ensembles d'entra√Ænement et de test
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Entra√Æner le mod√®le
model = LinearRegression()
model.fit(X_train, y_train)

# Formulaire utilisateur
st.sidebar.header("Param√®tres d'entr√©e")
hours_studied = st.sidebar.number_input("Heures d'√©tude", min_value=0.0, max_value=24.0, value=5.0)
previous_scores = st.sidebar.number_input("Scores pr√©c√©dents", min_value=0.0, max_value=100.0, value=70.0)
activities = st.sidebar.radio("Participe √† des activit√©s extrascolaires ?", ["Yes", "No"])
sleep_hours = st.sidebar.number_input("Heures de sommeil", min_value=0.0, max_value=24.0, value=8.0)
practice_papers = st.sidebar.number_input(
    "Nombre de questionnaires pratiqu√©s", min_value=0, max_value=50, value=5
)

# Convertir les donn√©es saisies
activities_numeric = 1 if activities == "Yes" else 0
input_data = pd.DataFrame(
    {
        "HS": [hours_studied],
        "Scores": [previous_scores],
        "Activities": [activities_numeric],
        "sommeil": [sleep_hours],
        "pratique": [practice_papers],
    }
)

# Faire des pr√©dictions
if st.sidebar.button("Pr√©dire"):
    prediction = model.predict(input_data)
    st.success(f"‚ú® Indice de performance pr√©dit : **{prediction[0]:.2f}**")
    
# √âvaluation du mod√®le
y_pred = model.predict(X_test)
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

st.subheader("√âvaluation du mod√®le")
st.write(f"**Erreur quadratique moyenne (MSE):** {mse:.2f}")
st.write(f"**Coefficient de d√©termination (R¬≤):** {r2:.2f}")

# Affichage des donn√©es
st.subheader("Aper√ßu des donn√©es")
st.dataframe(data)

# Personnalisation des couleurs
st.markdown(
    """
    <style>
    .stButton button {
        background-color: #4CAF50;
        color: white;
    }
    .stSidebar {
        background-color: #f4f4f4;
    }
    </style>
    """,
    unsafe_allow_html=True,
)
